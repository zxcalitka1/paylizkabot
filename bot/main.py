import asyncio
import logging
import config


import keyboards

from contextlib import suppress
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest



logging.basicConfig(level=logging.INFO)


tarif = [
    ["–ü—Ä–∏–≤–∞—Ç–∫–∞:", "\n–ü—Ä–∏–≤–∞—Ç–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü - 200—Ä\n–ü—Ä–∏–≤–∞—Ç–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞ - 600—Ä\n–ü—Ä–∏–≤–∞—Ç–∫–∞ –Ω–∞ –ë–ï–°–ö–û–ß–ù–û - 800—Ä\n\n–î–ª—è –æ–ø–ª—Ç—ã –ø–∏—Å–∞—Ç—å @HEALTyXA"],
    ["–§–æ—Ç–∫–∏:", "\n–§–æ—Ç–æ 5—à—Ç - 50—Ä\n–§–æ—Ç–æ 15—à—Ç - 150—Ä\n–§–æ—Ç–æ 30—à—Ç - 300—Ä\n\n–î–ª—è –æ–ø–ª—Ç—ã –ø–∏—Å–∞—Ç—å @HEALTyXA"],
    ["–ó–∞–∫–∞–∑–Ω—ã–µ —Ñ–æ—Ç–∫–∏:", "\n–ó–∞–∫–∞–∑–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç 100—Ä (—á–µ–º —Å–ª–æ–∂–Ω–µ–µ —Ñ–æ—Ç–æ —Ç–µ–º –±–æ–ª—å—à–µ —Ü–µ–Ω–∞)\n\n–î–ª—è –æ–ø–ª—Ç—ã –ø–∏—Å–∞—Ç—å @HEALTyXA"],
    ["–†–µ–∫–ª–º–∞:", "\n–ü–æ—Å—Ç –≤ –¢–ì–ö - 100—Ä\n–†–∞—Å—Å—ã–ª–∫–∞ –≤ –±–æ—Ç–µ - 300—Ä\n–ü–æ—Å—Ç –≤ –¢–ì–ö –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ –±–æ—Ç–µ - 500—Ä\n\n–î–ª—è –æ–ø–ª—Ç—ã –ø–∏—Å–∞—Ç—å @HEALTyXA"]
    
]

bot = Bot(token=config.TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –±—É–¥—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 


# /start and menu

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer(f"<b>–ü—Ä–∏–≤–µ—Ç–∏–∫ @{message.from_user.username}‚ù§! –í–æ—Ç –º–µ–Ω—é:</b>", reply_markup=keyboards.start_kb)

@dp.callback_query(keyboards.Pagination.filter(F.action.in_(["prev", "next"])))
async def pagination_handler(call: CallbackQuery, callback_data: keyboards.Pagination):
    page_num = int(callback_data.page)
    page = page_num - 1 if page_num > 0 else 0

    if callback_data.action == "next":
        page = page_num + 1 if page_num < (len(tarif) - 1) else page_num

    with suppress(TelegramBadRequest):
        await call.message.edit_text(
            f"{tarif[page][0]} <b>{tarif[page][1]}</b>",
            reply_markup=keyboards.paginator(page)
        )
    await call.answer()


# —Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–æ—á–µ–µ

@dp.message()
async def echo(message: Message):
    msg = message.text.lower()

    if msg == "—Å—Å—ã–ª–∫–∏":
        await message.answer("<b>–í–æ—Ç —Ç–≤–æ–∏ —Å—Å—ã–ª–∫–æ—á–∫–∏, –∫–æ—Ç–∏–∫üéà</b>", reply_markup=keyboards.links_kb)
    elif msg == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await message.answer("<b>–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–ø–æ–≤–∏—â–µ–Ω–∏–π –∏ –æ–ø–ª–∞—Ç—ã –º–æ–µ–π –ø—Ä–∏–≤–∞—Ç–æ—á–∫–∏ —Å –≥–æ—Ä—è—á–∏–º–∏ —Ñ–æ—Ç–æ—á–∫–∞–º–∏))</b>\n<b>–ö—É–ø–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–∫—É –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ '–¢–∞—Ä–∏—Ñ—ã' –∏ –í—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É</b>")
    elif msg == "—Ç–∞—Ä–∏—Ñ—ã":
        await message.answer(f"{tarif[0][0]} <b>{tarif[0][1]}</b>", reply_markup=keyboards.paginator())
    elif msg == "—Å–ø–µ—Ü.–∫–Ω–æ–ø–∫–∏":
         await message.answer("<b>–í–æ—Ç —Ç–≤–æ–∏ —Å–ø–µ—Ü.–∫–Ω–æ–ø–æ—á–∫–∏, –∫–æ—Ç–∏–∫üíó:</b>", reply_markup=keyboards.spec_kb)
    elif msg == "—Ö–æ—Ç–µ–ª–∫–∏":
        await message. answer("<b>–•–æ—Ç–µ–ª–æ—è–∫–∏ –ª–∏–∑—ã —Ç—É—Ç! ‚¨á </b>", reply_markup=keyboards.xotelki_kb)
    elif msg == "–≤–µ—Ä–Ω—É—Ç—å—Å—è":
        await message.answer("<b>—Ç—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–æ—Ç–∏–∫üíñ</b>", reply_markup=keyboards.start_kb)
    elif msg == "–∏–≥—Ä—É–ª—å–∫–∞":
        await message.answer("<b>–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –∫–æ—Ç–∏–∫</b>",reply_markup=keyboards.start_kb)
    
    


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
@dp.message()
async def echo(message: Message):
    await message.answer(f"<b>–ö–æ—Ç–∏–∫, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é( –õ—É—á—à–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é‚ù§</b>", reply_markup=keyboards.start_kb)    


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
    
if __name__ == "__main__":
    asyncio.run(main())


